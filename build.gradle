plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
	id 'jacoco'
	id 'org.openapi.generator' version '7.5.0'
}

group = 'com.gradle.student'
version = '1.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('mapstructVersion', "1.6.3")
	set('r2dbcMysql', "1.0.4")
	set('jakartaValidationVersion', "3.0.2")
	set('jakartaElApi', "6.0.1")
	set('hibernateValidatorVersion', "8.0.1.Final")
	set('expresslyVersion', "5.0.0")
	set('dotenvJavaVersion', "3.0.0")
	set('cloudVersion', "4.3.0")
	set('springDocVersion', "2.8.8")
	set('jacksonVersion', "0.2.6")
	set('serverResource', "openapi")
	set('basePackage', "com.openapi.generate")
	set('moduleRoot', "build/generated/openapi/src/main/java")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "io.asyncer:r2dbc-mysql:${r2dbcMysql}"
	implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}"
	implementation "jakarta.el:jakarta.el-api:${jakartaElApi}"
	implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
	implementation "org.glassfish.expressly:expressly:${expresslyVersion}"
	implementation "org.springframework.cloud:spring-cloud-starter-bootstrap:${cloudVersion}"
	implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${cloudVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocVersion}"
	implementation "org.openapitools:jackson-databind-nullable:${jacksonVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	dependsOn tasks.openApiGenerate
}

tasks.named('test') {
	useJUnitPlatform()
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/openapi.yaml"
	outputDir = "$rootDir/build/generated/openapi"
	packageName = "${basePackage}.${serverResource}"
	apiPackage = "${basePackage}.api"
	modelPackage = "${basePackage}.model"
	configOptions = [
			reactive: "true",
			openApiNullable: "true",
			useSpringBoot3: "true",
			useSwaggerUI: "true",
			useTags: "true",
			useLombokAnnotations: "true",
			interfaceOnly: "true"
	]
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'build/generated/openapi/src/main/java']
		}
	}
}

checkstyle {
	toolVersion = '10.12.5'
	configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
	configDirectory = file("$rootDir/config/checkstyle")
	ignoreFailures = false
	maxWarnings = 0
	maxErrors = 0
}

checkstyleMain {
	source = fileTree('src/main/java')
	reports {
		xml.required = true
		html.required = true
		html.outputLocation = file("build/reports/checkstyle/main.html")
	}
}

checkstyleTest {
	source = fileTree('src/test/java')
	reports {
		xml.required = true
		html.required = true
		html.outputLocation = file("build/reports/checkstyle/test.html")
	}
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test // report se genera después de ejecutar los tests
	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
	}
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/Application.class',
						'**/model/**',
						'**/repository/**',
						'**/util/**',
						'**/config/**'
				])
			})
	)
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80 // mínimo 80% de cobertura
			}
		}
	}
}

clean {
	delete "$rootDir/build"
}